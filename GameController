using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

[System.Serializable]
public class Player
{
    // Spieler X und O oben dem Board erstellen
    public Image panel;
    public Text text;

    public Button button;
}

[System.Serializable]
public class PlayerColor
{
    public Color panelColor;
    public Color textColor;
}

public class GameController : MonoBehaviour {

    // Ein Array mit allen Knöpfen drin
    public Text[] buttonList;
    private string playerSide;
    private string computerSide;
    public bool playerMove;
    public float delay;
    private int value;

    // Game over und Count Panel ersetzen
    public GameObject gameOverPanel;
    public Text gameOverText;
    public GameObject xWinCountPanel;
    public Text xCountNumber;
    public int xCount = 0;
    public GameObject drawCountPanel;
    public Text drawCountNumber;
    public int drawCount = 0;
    public GameObject oWinCountPanel;
    public Text oCountNumber;
    public int oCount = 0;

    private int moveCount;

    public GameObject restartButton;

    // Informationen für Spieler X und O oben dem Board
    public Player playerX;
    public Player playerO;
    public PlayerColor activePlayerColor;
    public PlayerColor inactivePlayerColor;
    public GameObject startInfo;

    void Awake()
    {
        // Game over Panel muss deaktiviert werden, wenn das Spiel startet
        gameOverPanel.SetActive(false);
        SetGameControllerReferenceOnButtons();
        moveCount = 0;

        // Dies deaktiviert Restart Knopf
        restartButton.SetActive(false);
        // Dies ermöglicht es den Spieler, "X" oder "O" auszuwählen und das Spiel zu starten
        playerMove = true;
    }

    // Spielen mit dem Computer
    void Update()
    {
        if (playerMove == false)
        {
            delay += delay * Time.deltaTime;
            if (delay >= 100)
            {
                value = Random.Range(0, buttonList.Length);
                if (buttonList[value].GetComponentInParent<Button>().interactable == true)
                {
                    buttonList[value].text = GetComputerSide();
                    buttonList[value].GetComponentInParent<Button>().interactable = false;
                    EndTurn();
                }
            }
        }
    }

    void SetGameControllerReferenceOnButtons()
    {
        for (int i = 0; i < buttonList.Length; i++)
        {
            buttonList[i].GetComponentInParent<GridSpace>().SetGameControllerReference(this);
        }
    }

    // Spieler wählt "X" oder "O"
    public void SetStartingSide(string startingSide)
    {
        playerSide = startingSide;

        if (playerSide == "X")
        {
            computerSide = "O";
            SetPlayerColors(playerX, playerO);
        }
        else
        {
            computerSide = "X";
            SetPlayerColors(playerO, playerX);
        }

        StartGame();
    }

    void StartGame()
    {
        SetBoardInteractable(true);
        SetPlayerButton(false);
        startInfo.SetActive(false);
    }

    public string GetPlayerSide()
    {
        return playerSide;
    }

    public string GetComputerSide()
    {
        return computerSide;
    }

    // Siegbedingungen
    public void EndTurn()
    {
        // Wenn man mit dem anderen Spieler spielt
        moveCount++;

        if (buttonList[0].text == playerSide && buttonList[1].text == playerSide && buttonList[2].text == playerSide)
        {
            GameOver(playerSide);
        }

        else if (buttonList[3].text == playerSide && buttonList[4].text == playerSide && buttonList[5].text == playerSide)
        {
            GameOver(playerSide);
        }

        else if (buttonList[6].text == playerSide && buttonList[7].text == playerSide && buttonList[8].text == playerSide)
        {
            GameOver(playerSide);
        }

        else if (buttonList[0].text == playerSide && buttonList[3].text == playerSide && buttonList[6].text == playerSide)
        {
            GameOver(playerSide);
        }

        else if (buttonList[1].text == playerSide && buttonList[4].text == playerSide && buttonList[7].text == playerSide)
        {
            GameOver(playerSide);
        }

        else if (buttonList[2].text == playerSide && buttonList[5].text == playerSide && buttonList[8].text == playerSide)
        {
            GameOver(playerSide);
        }

        else if (buttonList[0].text == playerSide && buttonList[4].text == playerSide && buttonList[8].text == playerSide)
        {
            GameOver(playerSide);
        }

        else if (buttonList[2].text == playerSide && buttonList[4].text == playerSide && buttonList[6].text == playerSide)
        {
            GameOver(playerSide);
        }

        // Wenn man mit dem Computer spielt
        else if (buttonList[0].text == playerSide && buttonList[1].text == playerSide && buttonList[2].text == playerSide)
        {
            GameOver(computerSide);
        }

        else if (buttonList[3].text == playerSide && buttonList[4].text == playerSide && buttonList[5].text == playerSide)
        {
            GameOver(computerSide);
        }

        else if (buttonList[6].text == playerSide && buttonList[7].text == playerSide && buttonList[8].text == playerSide)
        {
            GameOver(computerSide);
        }

        else if (buttonList[0].text == playerSide && buttonList[3].text == playerSide && buttonList[6].text == playerSide)
        {
            GameOver(computerSide);
        }

        else if (buttonList[1].text == playerSide && buttonList[4].text == playerSide && buttonList[7].text == playerSide)
        {
            GameOver(computerSide);
        }

        else if (buttonList[2].text == playerSide && buttonList[5].text == playerSide && buttonList[8].text == playerSide)
        {
            GameOver(computerSide);
        }

        else if (buttonList[0].text == playerSide && buttonList[4].text == playerSide && buttonList[8].text == playerSide)
        {
            GameOver(computerSide);
        }

        else if (buttonList[2].text == playerSide && buttonList[4].text == playerSide && buttonList[6].text == playerSide)
        {
            GameOver(computerSide);
        }

        else if (buttonList[0].text == "X" && buttonList[1].text == "X" && buttonList[2].text == "X"
            || buttonList[3].text == "X" && buttonList[4].text == "X" && buttonList[5].text == "X"
            || buttonList[6].text == "X" && buttonList[7].text == "X" && buttonList[8].text == "X"
            || buttonList[0].text == "X" && buttonList[3].text == "X" && buttonList[6].text == "X"
            || buttonList[1].text == "X" && buttonList[4].text == "X" && buttonList[7].text == "X"
            || buttonList[2].text == "X" && buttonList[5].text == "X" && buttonList[8].text == "X"
            || buttonList[0].text == "X" && buttonList[4].text == "X" && buttonList[8].text == "X"
            || buttonList[2].text == "X" && buttonList[4].text == "X" && buttonList[2].text == "X")
        {
            GameOver("X");
        }

        else if (moveCount >= 9)
        {
            GameOver("draw");
        }

        else if (buttonList[0].text == "O" && buttonList[1].text == "O" && buttonList[2].text == "O"
            || buttonList[3].text == "O" && buttonList[4].text == "O" && buttonList[5].text == "O"
            || buttonList[6].text == "O" && buttonList[7].text == "O" && buttonList[8].text == "O"
            || buttonList[0].text == "O" && buttonList[3].text == "O" && buttonList[6].text == "O"
            || buttonList[1].text == "O" && buttonList[4].text == "O" && buttonList[7].text == "O"
            || buttonList[2].text == "O" && buttonList[5].text == "O" && buttonList[8].text == "O"
            || buttonList[0].text == "O" && buttonList[4].text == "O" && buttonList[8].text == "O"
            || buttonList[2].text == "O" && buttonList[4].text == "O" && buttonList[2].text == "O")
        {
            GameOver("O");
        }

        else
        {
            ChangeSides();
        }
    }

    // Informationen von den beiden "X" und "O" Knöpfen
    void SetPlayerColors(Player newPlayer, Player oldPlayer)
    {
        newPlayer.panel.color = activePlayerColor.panelColor;
        newPlayer.text.color = activePlayerColor.textColor;
        oldPlayer.panel.color = inactivePlayerColor.panelColor;
        oldPlayer.text.color = inactivePlayerColor.textColor;
    }

    // Diese Funktion beendet das Spiel und deaktiviert alle Knöpfe, damit niemand weiter anklicken kann
    void GameOver(string winningPlayer)
    {
        SetBoardInteractable(false);

        if (winningPlayer == "X")
        {
            SetGameOverText("X wins!");
            SetPlayerColorsInacive();
            xCountNumber.text = (xCount += 1).ToString();
            SetXCountNumber();
        }

        else if (winningPlayer == "draw")
        {
            SetGameOverText("It's a Draw!");
            SetPlayerColorsInacive();
            drawCountNumber.text = (drawCount += 1).ToString();
            SetDrawCountNumber();
        }

        else if (winningPlayer == "O")
        {
            SetGameOverText("O wins!");
            SetPlayerColorsInacive();
            oCountNumber.text = (oCount += 1).ToString();
            SetOCountNumber();
        }

        // Dies aktiviert den Restart Knopf
        restartButton.SetActive(true);
    }

    // Diese Funktion ändert die Spielerseite, damit "X" und "O" abwechselnd vorkommt
    void ChangeSides()
    {
        playerSide = (playerSide == "X") ? "O" : "X";
        //playerMove = (playerMove == true) ? false : true;
        if (playerSide == "X")
        //if (playerMove == true)
        {
            SetPlayerColors(playerX, playerO);
        }
        else
        {
            SetPlayerColors(playerO, playerX);
        }
    }

    void SetGameOverText(string value)
    {
        gameOverPanel.SetActive(true);
        gameOverText.text = value;
    }

    public string SetXCountNumber()
    {
        return xCountNumber.text;
    }
    
    public string SetDrawCountNumber()
    {
        return drawCountNumber.text;
    }

    public string SetOCountNumber()
    {
        return oCountNumber.text;
    }

    public void RestartGame()
    {
        moveCount = 0;
        gameOverPanel.SetActive(false);
        restartButton.SetActive(false);
        SetPlayerButton(true);
        SetPlayerColorsInacive();
        startInfo.SetActive(true);
        playerMove = true;
        delay = 10;

        // Dies reaktiviert alle Knöpfe
        for (int i = 0; i < buttonList.Length; i++)
        {
            // Dies entfernt alle "X" und "O"
            buttonList[i].text = "";
        }

        // Dies deaktiviert den Restart Knopf
        restartButton.SetActive(false);
    }

    void SetBoardInteractable(bool toggle)
    {
        for (int i = 0; i < buttonList.Length; i++)
        {
            buttonList[i].GetComponentInParent<Button>().interactable = toggle;
            buttonList[i].text = "";
        }
    }

    void SetPlayerButton(bool toggle)
    {
        playerX.button.interactable = toggle;
        playerO.button.interactable = toggle;
    }

    void SetPlayerColorsInacive()
    {
        playerX.panel.color = inactivePlayerColor.panelColor;
        playerX.text.color = inactivePlayerColor.textColor;
        playerO.panel.color = inactivePlayerColor.panelColor;
        playerO.text.color = inactivePlayerColor.textColor;
    }
}
